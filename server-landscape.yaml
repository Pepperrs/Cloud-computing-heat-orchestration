heat_template_version: 2013-05-23

# todo:
# -1 router connecting the private network with the public
#  tu-internal network
# -fixing output of nested attributes(2 priv IP addresses backend server)

parameters:
  key_name: kybranz
    type: string
    description: Name of keypair to assign to servers
  image: "ubuntu-16.04"
    type: string
    description: Name of image to use for servers
  flavor: "Cloud Computing"
    type: string
    description: Flavor to use for servers
  public_net_id: "pub_network_01"
    type: string
    description: >
      ID of public network for which floating IP addresses will be allocated
  private_net_id: "priv_network_01
    type: string
    description: ID of private network into which servers get deployed
  private_subnet_id:"priv_subnet_01"
    type: string
    description: ID of private sub network into which servers get deployed
  availability_zone: "Cloud Computing 2017"
    type: comma_delimited_list
    label: Availability zones
    description: Availability zone mapping

resources:

  router1:
        type: OS::Neutron::Router
        properties:
          external_gateway_info:
                network: { get_param: public_net_id }
                # missing connecting the private network with the public
                # tu-internal network

  router1_interface:
        type: OS::Neutron::RouterInterface
        properties:
          router_id: { get_resource: router1 }
          subnet_id: { get_resource: private_subnet_id }

  server1:
    type: server.yml
    properties:
      name: frontend-server-%index%
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      avaliability_zone: { get_param: availability_zone }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_resource: server_security_group }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: server1_port }

# creating a nested stack which uses Heats Resource Group feature
# to create two equal instances.
  my_indexed_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: server.yml
        properties:
          # create a unique name for each server
          # using its index in the group
          name: backend-server-%index%
          image: { get_param: image }
          flavor: { get_param: flavor }
          key_name: { get_param: key_name }
          avaliability_zone: { get_param: availability_zone }
          networks:
            - port: { get_resource: server2_port }

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_resource: backend_security_group }]

# creates a custom security group managed by Heat that opens the port
# 80 and 22 to the outside world
  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: security-group-CC17
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

# create a security group for backend server to be only available through
# ssh from ip-addr of frontend server
  backend_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: backend-security-group-CC17
      rules:
        - remote_ip_prefix: { get_attr: [ server1_floating_ip, floating_ip_address ] }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: { get_attr: [ server1_floating_ip, floating_ip_address ] }
          protocol: icmp

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
# missing output of nested backendserver attributes (ip)
